### ------------------------------------- STAGES --------------------------------------------- ###
# stages will run in the order listed. stages will only run if the
# jobs defined for them qualify based on the event (merge, commit, parse commit message)

stages:
  - test
  - sec-scan
  - end2end
  - publish
  - release     

### ------------------------------------ END OF STAGES ---------------------------------------- ###


### -------------------------- LIST OF FILES WE CARE ABOUT CHANGES ON ------------------------- ###

# define changes anchor
.changes: &changes
  - setup.py
  - src/**/*
  - tests/**/*
  - .gitlab-ci.yml
  - pyproject.toml

### ----------------------- END OF LIST OF FILES WE CARE ABOUT CHANGES ON --------------------- ###


### ----------------------------------------- TEST JOBS ----------------------------------------- ###

# ------------------ test scripts ---------------- #

# using a yaml anchor to reuse test scripts
# the "." means gitlab will ignore it as a job

# create reusable script for linux tests
.script-linux: &script-linux
  - echo "this is testing"
  - echo "python version" && python --version
  - python -m pip install --upgrade pip
  - pip install -e .[dev]
  - coverage run --source=src -m unittest discover -v -s tests/unit
  - coverage report -m | grep TOTAL

# create reusable script for windows tests
.script-win: &script-win
  - echo "this is testing"
  - echo "python version"; python --version
  - python -m pip install --upgrade pip
  - pip install -e .[dev]
  - coverage run --source=src -m unittest discover -v -s tests/unit
  - coverage xml
  - coverage report -m | Select-String "TOTAL"

# -------------- end test scripts ------------------ #


# --------------------- jobs ----------------------- #

# test job for python 3.10 on windows
test-win-py310:                                                        # name of the job
  stage: test                                                         # the stage the job belongs to
  image: python:3.10-windowsservercore-1809                         # docker image to use to run the job
  tags:
    - shared-win                                                      # use runner with this tag
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
      
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev"               # Execute this job if the merge target branch is dev and if the files we care about have changes
      changes: *changes                                               
      when: on_success                                                # Execute job if jobs from previous stage are successful. In this case always and on_success will 
                                                                      # yield the same result, because this job is part of the first stage.

    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "main"   # Execute this job if the commit target branch is dev or main. This includes pushes from users and post merge commits
      changes: *changes                                               # Execute the job if any of the files we care about were changed as defined above.
      when: on_success                                                # Execute job if jobs from previous stage are successful.

    - when: never                                                     # If not criteria were matched, do not run this job

  script: *script-win                                                 # predefined test script to run
  coverage: '/^TOTAL.*\s+(\d+\%)$/'                                   # regex for capturing test coverage percentage
  artifacts:                                                          # publish report to gitlab for enhanced features during merge request review
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

# test job for python 3.12 running on linux
test-linux-py312:                                                      # name of the job
  stage: test                                                         # the stage the job belongs to
  image: python:3.12-alpine3.18                                     # use this docker image to run the job
  tags:
    - shared-linux                                                    # use runner with this tag
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: on_success

    - if: $CI_COMMIT_TAG                                              # If a tag is set, it's because the release was just created, we don't need to run this job again
      when: never
      
    - if: $CI_PIPELINE_SOURCE == "push"                               # Execute this job if the pipeline is initiated by a push. This will include post merge commits.
      changes: *changes                                               # Execute this job only if the files we care about have changed
      when: on_success                                                # Execute job if jobs from previous stage are successful. In this case always and on_success will 
                                                                      # yield the same result, because this job is part of the first stage.
    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "main"   # Execute this job if the commit target branch is dev or main. This includes pushes from users and post merge commits
      changes: *changes                                               # Execute the job if any of the files we care about were changed as defined above.
      when: on_success                                                # Execute job if jobs from previous stage are successful.
                                                                      # Added this if to make sure that these jobs run when a pipeline is manually run from the UI

    - when: never                                                     # If not criteria were matched, do not run this job
  
  script: *script-linux                                               # run the scripted defined as an anchor above
  coverage: '/^TOTAL.*\s+(\d+\%)$/'                                   # regex for capturing test coverage percentage
  artifacts:                                                          # publish report to gitlab for enhanced features during merge request review
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml


# test job for python 3.11 running on linux
test-linux-py311:                                                      # name of the job
  stage: test                                                         # the stage the job belongs to
  image: python:3.11-alpine3.18                                     # use this docker image to run the job
  tags:
    - shared-linux                                                    # use runner with this tag
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: on_success

    - if: $CI_COMMIT_TAG                                              # If a tag is set, it's because the release was just created, we don't need to run this job again
      when: never
      
    - if: $CI_PIPELINE_SOURCE == "push"                               # Execute this job if the pipeline is initiated by a push. This will include post merge commits.
      changes: *changes                                               # Execute this job only if the files we care about have changed
      when: on_success                                                # Execute job if jobs from previous stage are successful. In this case always and on_success will 
                                                                      # yield the same result, because this job is part of the first stage.
    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "main"   # Execute this job if the commit target branch is dev or main. This includes pushes from users and post merge commits
      changes: *changes                                               # Execute the job if any of the files we care about were changed as defined above.
      when: on_success                                                # Execute job if jobs from previous stage are successful.
                                                                      # Added this if to make sure that these jobs run when a pipeline is manually run from the UI

    - when: never                                                     # If not criteria were matched, do not run this job
  
  script: *script-linux                                               # run the scripted defined as an anchor above
  coverage: '/^TOTAL.*\s+(\d+\%)$/'                                   # regex for capturing test coverage percentage
  artifacts:                                                          # publish report to gitlab for enhanced features during merge request review
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

# test job for python 3.10 running on linux
test-linux-py310:                                                      # name of the job
  stage: test                                                         # the stage the job belongs to
  image: python:3.10-slim-bookworm                                     # use this docker image to run the job
  tags:
    - shared-linux                                                    # use runner with this tag
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: on_success

    - if: $CI_COMMIT_TAG                                              # If a tag is set, it's because the release was just created, we don't need to run this job again
      when: never
      
    - if: $CI_PIPELINE_SOURCE == "push"                               # Execute this job if the pipeline is initiated by a push. This will include post merge commits.
      changes: *changes                                               # Execute this job only if the files we care about have changed
      when: on_success                                                # Execute job if jobs from previous stage are successful. In this case always and on_success will 
                                                                      # yield the same result, because this job is part of the first stage.
    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "main"   # Execute this job if the commit target branch is dev or main. This includes pushes from users and post merge commits
      changes: *changes                                               # Execute the job if any of the files we care about were changed as defined above.
      when: on_success                                                # Execute job if jobs from previous stage are successful.
                                                                      # Added this if to make sure that these jobs run when a pipeline is manually run from the UI

    - when: never                                                     # If not criteria were matched, do not run this job
  
  script: *script-linux                                               # run the scripted defined as an anchor above
  coverage: '/^TOTAL.*\s+(\d+\%)$/'                                   # regex for capturing test coverage percentage
  artifacts:                                                          # publish report to gitlab for enhanced features during merge request review
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

# test job for python 3.9 running on linux
test-linux-py39:                                                      # name of the job
  stage: test                                                         # the stage the job belongs to
  image: python:3.9-slim-bullseye                                     # use this docker image to run the job
  tags:
    - shared-linux                                                    # use runner with this tag
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: on_success

    - if: $CI_COMMIT_TAG                                              # If a tag is set, it's because the release was just created, we don't need to run this job again
      when: never
      
    - if: $CI_PIPELINE_SOURCE == "push"                               # Execute this job if the pipeline is initiated by a push. This will include post merge commits.
      changes: *changes                                               # Execute this job only if the files we care about have changed
      when: on_success                                                # Execute job if jobs from previous stage are successful. In this case always and on_success will 
                                                                      # yield the same result, because this job is part of the first stage.
    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "main"   # Execute this job if the commit target branch is dev or main. This includes pushes from users and post merge commits
      changes: *changes                                               # Execute the job if any of the files we care about were changed as defined above.
      when: on_success                                                # Execute job if jobs from previous stage are successful.
                                                                      # Added this if to make sure that these jobs run when a pipeline is manually run from the UI

    - when: never                                                     # If not criteria were matched, do not run this job
  
  script: *script-linux                                               # run the scripted defined as an anchor above
  coverage: '/^TOTAL.*\s+(\d+\%)$/'                                   # regex for capturing test coverage percentage
  artifacts:                                                          # publish report to gitlab for enhanced features during merge request review
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml


# test job for python 3.8 running on linux
test-linux-py38:                                                      # name of the job
  stage: test                                                         # the stage the job belongs to
  image: python:3.8-alpine3.18                                     # use this docker image to run the job
  tags:
    - shared-linux                                                    # use runner with this tag
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: on_success

    - if: $CI_COMMIT_TAG                                              # If a tag is set, it's because the release was just created, we don't need to run this job again
      when: never

    - if: $CI_PIPELINE_SOURCE == "push"                               # Execute this job if the pipeline is initiated by a push. This will include post merge commits.
      changes: *changes                                               # Execute this job only if the files we care about have changed
      when: on_success                                                # Execute job if jobs from previous stage are successful. In this case always and on_success will 

    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "main"   # Execute this job if the commit target branch is dev or main. This includes pushes from users and post merge commits
      changes: *changes                                               # Execute the job if any of the files we care about were changed as defined above.
      when: on_success                                                # Execute job if jobs from previous stage are successful.                                                                     
                                                                      # Added this if to make sure that these jobs run when a pipeline is manually run from the UI

    - when: never                                                     # If not criteria were matched, do not run this job
  
  script: *script-linux                                               # run the scripted defined as an anchor above
  coverage: '/^TOTAL.*\s+(\d+\%)$/'                                   # regex for capturing test coverage percentage
  artifacts:                                                          # publish report to gitlab for enhanced features during merge request review
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

# ------------------------- end jobs --------------------------- #

### ------------------------------------- END TEST JOBS ------------------------------------------------- ###


### ------------------------------------ SECURITY SCANS --------------------------------------- ###

# ------------------ SAST SCAN ----------------- #
variables:
  # Setting this variable will affect all Security templates
  # (SAST, Dependency Scanning, ...)
  SECURE_ANALYZERS_PREFIX: "$CI_TEMPLATE_REGISTRY_HOST/security-products"
  SAST_IMAGE_SUFFIX: ""

  SAST_EXCLUDED_ANALYZERS: ""
  SAST_EXCLUDED_PATHS: "spec, test, tests, tmp"
  SCAN_KUBERNETES_MANIFESTS: "false"

sast:
  stage: sec-scan
  artifacts:
    reports:
      sast: gl-sast-report.json
  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "$CI_JOB_NAME is used for configuration only, and its script should not be executed"
    - exit 1

.sast-analyzer:
  extends: sast
  allow_failure: false
  # `rules` must be overridden explicitly by each child job
  # see https://gitlab.com/gitlab-org/gitlab/-/issues/218444
  script:
    - /analyzer run
    - |
        echo "---- checking log ----";
        test_critical=$(cat gl-sast-report.json | { grep -c "\"severity\"\:\"Critical\"" || true; });
        echo "--- test critical ---"
        echo $test_critical

        if [[ "$test_critical" == 0 ]]; 
          then echo "no critical vulnerabilities found";
          else echo "critical vulnerabilities found in report" && 
            echo " ------ gl-sast-report.json ---------" &&
            cat gl-sast-report.json && 
            exit 1;
        fi;

semgrep-sast:
  extends: .sast-analyzer
  image:
    name: "$SAST_ANALYZER_IMAGE"
  variables:
    SEARCH_MAX_DEPTH: 20
    SAST_ANALYZER_IMAGE_TAG: 4
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/semgrep:$SAST_ANALYZER_IMAGE_TAG$SAST_IMAGE_SUFFIX"
  rules:
    - if: $SAST_DISABLED == 'true' || $SAST_DISABLED == '1'
      when: never

    - if: $SAST_EXCLUDED_ANALYZERS =~ /semgrep/
      when: never

    - if: $CI_COMMIT_MESSAGE =~ /(run sec scan)/ 
      when: on_success

    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "main"
      when: on_success 

      exists:
        - '**/*.py'
        - '**/*.js'
        - '**/*.jsx'
        - '**/*.ts'
        - '**/*.tsx'
        - '**/*.c'
        - '**/*.go'
        - '**/*.java'
        - '**/*.cs'
        - '**/*.html'
        - '**/*.scala'
        - '**/*.sc'


# ------------------ DEPENDENCY SCAN ----------------- #

# test job for snyk dependency scan
dep-sec-test-snyk:                                                      
  stage: sec-scan                                                
  image: python:3.11-slim-bullseye                               
  tags:
    - shared-linux                                                 
  rules:
    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "main"                                         
      when: on_success      

    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: on_success

    - if: $CI_COMMIT_MESSAGE =~ /(run sec scan)/
      when: on_success                                
                                                        
  script:
    - echo "STARTING DEPENDENCY SCANS"
    - ls -lah
    - echo "python version" && python --version
    - python -m pip install --upgrade pip
    - apt update
    - apt upgrade -y
    - apt install curl -y
    - curl https://static.snyk.io/cli/latest/snyk-linux -o snyk
    - chmod +x ./snyk
    - mv ./snyk /usr/local/bin/
    - snyk auth ${SNYK_TOKEN}
    - pip install .
    - snyk test --file=setup.py --severity-threshold=medium                                          


# ------------------ END OF DEPENDENCY SCAN ----------------- #

### ----------------------- END OF SECURITY TESTS--------------------- ###





### -------------------------------------------- END TO END TESTING ------------------------------------------------ ###

# send real emails using command line tool
end2end:                                                                                     
  stage: end2end                                                                              
  image: python:3.11-buster                                                                  
  tags:
    - shared-linux                                                                            # use runner with this tag
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"                                                     # Don't run if the pipeline is triggered by a schedule
      when: never

    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "main"                                         
      when: on_success                                                       

  script:
    - pip install .
    - export AWS_ACCESS_KEY_ID=${SES_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=${SES_SECRET_KEY}                                                                  
    - send-test --to ${TO_ADDR} --fromaddr ${FROM_ADDR} --awsregion ${SES_REGION}
    - send-email --to ${TO_ADDR} --fromaddr ${FROM_ADDR} --awsregion ${SES_REGION} --fromname 'py-basic-ses-tester' --subject 'test subject' --message_txt 'plain email text' --message_html '<h1>py-basic-ses test</h1><p>test email html message</p>'

### ------------------------------------------- END END TO END TESTING ---------------------------------------------- ###



### -------------------------------------------- PUBLISH ------------------------------------------------ ###

# publish job - publish package to pypi.org only on merge to master
publish:                                                                                      # name of the job
  stage: publish                                                                              # will run in the publsh stage
  image: python:3.10-buster                                                                  # using buster because alpine had issues installing twine dependencies
  tags:
    - shared-linux                                                                            # use runner with this tag
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"                                                     # Don't run if the pipeline is triggered by a schedule
      when: never

    - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE =~ /([0-9]+)\.([0-9]+)\.([0-9]+)/ # to run we must be committing to main (includes post merge commit) and the commit
      when: on_success                                                                        # message must contain a semantic version number pattern (ex: 2.10.4)

  script:
    - pip install twine                                                                       # install twine, a tool to publish python distribution packages
    - python setup.py sdist bdist_wheel                                                       # create distribution packages
    - TWINE_PASSWORD=${PYPI_TOKEN} TWINE_USERNAME=__token__ python -m twine upload dist/*     # upload distribution packages to the repo registry

### ------------------------------------------- END PUBLISH ---------------------------------------------- ###


### ----------------------------------------------- RELEASE ---------------------------------------------- ###

# release job to automatically create a gitlab release and tag if a semantic version is
# listed in the commit message of the merge requests merging dev into main
release:                                                                                                          # this is the job name
  stage: release                                                                                                  # will run in the release stage
  image: registry.gitlab.com/gitlab-org/release-cli:latest                                                        # using the release-cli image, because we need release-cli to create the release
  tags:
    - shared-linux                                                                                                # use runner with this tag

  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"                                                                         # Don't run if the pipeline is triggered by a schedule
      when: never
    
    - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE =~ /([0-9]+)\.([0-9]+)\.([0-9]+)/                     # only run this job if we can find a semantic versioning pattern like 1.3.12
      when: on_success

  script:
    - export VERSION_TAG=$(echo $CI_COMMIT_MESSAGE | sed -ne 's/[^0-9]*\(\([0-9]\.\)\{0,4\}[0-9][^.]\).*/\1/p')   # pulling version number from commit text
    - export VERSION_TAG=$(echo $VERSION_TAG | sed 's/ //g')                                                      # striping any leading or trailing spaces out of version number
    - echo "Creating release version $VERSION_TAG" 
    - release-cli create --name "Release $VERSION_TAG" --description "Automated release - $CI_COMMIT_MESSAGE" --tag-name "$VERSION_TAG" # using release-cli directly from scripts to create release

### -------------------------------------------- END OF RELEASE ------------------------------------------- ###
