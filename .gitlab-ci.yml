### ------------------------------------- STAGES --------------------------------------------- ###
# stages will run in the order listed. stages will only run if the
# jobs defined for them qualify based on the event (merge, commit, parse commit message)

stages:
  - test
  - publish
  - release     

### ------------------------------------ END OF STAGES ---------------------------------------- ###


### -------------------------- LIST OF FILES WE CARE ABOUT CHANGES ON ------------------------- ###

# define changes anchor
.changes: &changes
  - setup.py
  - src/*
  - tests/*
  - .gitlab-ci.yml
  - pyproject.toml

### ----------------------- END OF LIST OF FILES WE CARE ABOUT CHANGES ON --------------------- ###


### ----------------------------------------- TEST JOBS ----------------------------------------- ###

# ------------------ test scripts ---------------- #

# using a yaml anchor to reuse test scripts
# the "." means gitlab will ignore it as a job

# create reusable script for linux tests
.script-linux: &script-linux
  - echo "this is testing"
  - echo "python version" && python --version
  - python -m pip install --upgrade pip
  - pip install -e .[dev]
  - coverage run --source=src -m unittest discover -v -s tests
  - coverage report -m | grep TOTAL

# create reusable script for windows tests
.script-win: &script-win
  - echo "this is testing"
  - echo "python version"; python --version
  - python -m pip install --upgrade pip
  - pip install -e .[dev]
  - coverage run --source=src -m unittest discover -v -s tests
  - coverage xml
  - coverage report -m | Select-String "TOTAL"

# -------------- end test scripts ------------------ #


# --------------------- jobs ----------------------- #

# test job for python 3.9 windows
test-win-py39:                                                        # name of the job
  stage: test                                                         # the stage the job belongs to
  image: python:3.9.5-windowsservercore-1809                          # the docker image to use for running the job
  tags:
    - shared-win                                                      # use runner with this tag
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev"               # Execute this job if the merge target branch is dev and if the files we care about have changes
      changes: *changes                                               # Execute the job if any of the files we care about were changed as defined above.
      when: on_success                                                # Execute job if jobs from previous stage are successful. In this case always and on_success will 
                                                                      # yield the same result, because this job is part of the first stage.

    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "main"   # Execute this job if the commit target branch is dev or main. This includes pushes from users and post merge commits
      changes: *changes                                               # Execute the job if any of the files we care about were changed as defined above.
      when: on_success                                                # Execute job if jobs from previous stage are successful.

    - when: never                                                     # If not criteria were matched, do not run this job
  
  script: *script-win                                                 # predefined test script to run
  artifacts:
    reports:
      cobertura: coverage.xml
  

# test job for python 3.10 on windows
test-win-py310:                                                        # name of the job
  stage: test                                                         # the stage the job belongs to
  image: python:3.10-windowsservercore-1809                         # docker image to use to run the job
  tags:
    - shared-win                                                      # use runner with this tag
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev"               # Execute this job if the merge target branch is dev and if the files we care about have changes
      changes: *changes                                               
      when: on_success                                                # Execute job if jobs from previous stage are successful. In this case always and on_success will 
                                                                      # yield the same result, because this job is part of the first stage.

    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "main"   # Execute this job if the commit target branch is dev or main. This includes pushes from users and post merge commits
      changes: *changes                                               # Execute the job if any of the files we care about were changed as defined above.
      when: on_success                                                # Execute job if jobs from previous stage are successful.

    - when: never                                                     # If not criteria were matched, do not run this job

  script: *script-win                                                 # predefined test script to run
  artifacts:
    reports:
      cobertura: coverage.xml


# test job for python 3.10 running on linux
test-linux-py310:                                                      # name of the job
  stage: test                                                         # the stage the job belongs to
  image: python:3.10-slim-bullseye                                     # use this docker image to run the job
  tags:
    - shared-linux                                                    # use runner with this tag
  rules:
    - if: $CI_COMMIT_TAG                                              # If a tag is set, it's because the release was just created, we don't need to run this job again
      when: never
      
    - if: $CI_PIPELINE_SOURCE == "push"                               # Execute this job if the pipeline is initiated by a push. This will include post merge commits.
      changes: *changes                                               # Execute this job only if the files we care about have changed
      when: on_success                                                # Execute job if jobs from previous stage are successful. In this case always and on_success will 
                                                                      # yield the same result, because this job is part of the first stage.
    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "main"   # Execute this job if the commit target branch is dev or main. This includes pushes from users and post merge commits
      changes: *changes                                               # Execute the job if any of the files we care about were changed as defined above.
      when: on_success                                                # Execute job if jobs from previous stage are successful.
                                                                      # Added this if to make sure that these jobs run when a pipeline is manually run from the UI

    - when: never                                                     # If not criteria were matched, do not run this job
  
  script: *script-linux                                               # run the scripted defined as an anchor above

# test job for python 3.9 running on linux
test-linux-py39:                                                      # name of the job
  stage: test                                                         # the stage the job belongs to
  image: python:3.9-slim-bullseye                                     # use this docker image to run the job
  tags:
    - shared-linux                                                    # use runner with this tag
  rules:
    - if: $CI_COMMIT_TAG                                              # If a tag is set, it's because the release was just created, we don't need to run this job again
      when: never
      
    - if: $CI_PIPELINE_SOURCE == "push"                               # Execute this job if the pipeline is initiated by a push. This will include post merge commits.
      changes: *changes                                               # Execute this job only if the files we care about have changed
      when: on_success                                                # Execute job if jobs from previous stage are successful. In this case always and on_success will 
                                                                      # yield the same result, because this job is part of the first stage.
    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "main"   # Execute this job if the commit target branch is dev or main. This includes pushes from users and post merge commits
      changes: *changes                                               # Execute the job if any of the files we care about were changed as defined above.
      when: on_success                                                # Execute job if jobs from previous stage are successful.
                                                                      # Added this if to make sure that these jobs run when a pipeline is manually run from the UI

    - when: never                                                     # If not criteria were matched, do not run this job
  
  script: *script-linux                                               # run the scripted defined as an anchor above


# test job for python 3.8 running on linux
test-linux-py38:                                                      # name of the job
  stage: test                                                         # the stage the job belongs to
  image: python:3.8-slim-bullseye                                     # use this docker image to run the job
  tags:
    - shared-linux                                                    # use runner with this tag
  rules:
    - if: $CI_COMMIT_TAG                                              # If a tag is set, it's because the release was just created, we don't need to run this job again
      when: never

    - if: $CI_PIPELINE_SOURCE == "push"                               # Execute this job if the pipeline is initiated by a push. This will include post merge commits.
      changes: *changes                                               # Execute this job only if the files we care about have changed
      when: on_success                                                # Execute job if jobs from previous stage are successful. In this case always and on_success will 

    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "main"   # Execute this job if the commit target branch is dev or main. This includes pushes from users and post merge commits
      changes: *changes                                               # Execute the job if any of the files we care about were changed as defined above.
      when: on_success                                                # Execute job if jobs from previous stage are successful.                                                                     
                                                                      # Added this if to make sure that these jobs run when a pipeline is manually run from the UI

    - when: never                                                     # If not criteria were matched, do not run this job
  
  script: *script-linux                                               # run the scripted defined as an anchor above


# ------------------------- end jobs --------------------------- #

### ------------------------------------- END TEST JOBS ------------------------------------------------- ###



### -------------------------------------------- PUBLISH ------------------------------------------------ ###

# publish job - publish pypi package, but to swilsy | GIT, only on merge to master
publish:                                                                                      # name of the job
  stage: publish                                                                              # will run in the publsh stage
  image: python:3.10-buster                                                                  # using buster because alpine had issues installing twine dependencies
  tags:
    - shared-linux                                                                            # use runner with this tag
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"                                                     # Don't run if the pipeline is triggered by a schedule
      when: never

    - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE =~ /([0-9]+)\.([0-9]+)\.([0-9]+)/ # to run we must be committing to main (includes post merge commit) and the commit
      when: on_success                                                                        # message must contain a semantic version number pattern (ex: 2.10.4)

  script:
    - pip install twine                                                                       # install twine, a tool to publish python distribution packages
    - python setup.py sdist bdist_wheel                                                       # create distribution packages
    - TWINE_PASSWORD=${PYPI_TOKEN} TWINE_USERNAME=__token__ python -m twine upload --repository-url https://pypi.org/project/py-basic-ses/ dist/* # upload distribution packages to the repo registry

### ------------------------------------------- END PUBLISH ---------------------------------------------- ###


### ----------------------------------------------- RELEASE ---------------------------------------------- ###

# release job to automatically create a gitlab release and tag if a semantic version is
# listed in the commit message of the merge requests merging dev into main
release:                                                                                                          # this is the job name
  stage: release                                                                                                  # will run in the release stage
  image: registry.gitlab.com/gitlab-org/release-cli:latest                                                        # using the release-cli image, because we need release-cli to create the release
  tags:
    - shared-linux                                                                                                # use runner with this tag

  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"                                                                         # Don't run if the pipeline is triggered by a schedule
      when: never
    
    - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE =~ /([0-9]+)\.([0-9]+)\.([0-9]+)/                     # only run this job if we can find a semantic versioning pattern like 1.3.12
      when: on_success

  script:
    - export VERSION_TAG=$(echo $CI_COMMIT_MESSAGE | sed -ne 's/[^0-9]*\(\([0-9]\.\)\{0,4\}[0-9][^.]\).*/\1/p')   # pulling version number from commit text
    - export VERSION_TAG=$(echo $VERSION_TAG | sed 's/ //g')                                                      # striping any leading or trailing spaces out of version number
    - echo "Creating release version $VERSION_TAG" 
    - release-cli create --name "Release $VERSION_TAG" --description "Automated release - $CI_COMMIT_MESSAGE" --tag-name "$VERSION_TAG" # using release-cli directly from scripts to create release

### -------------------------------------------- END OF RELEASE ------------------------------------------- ###
